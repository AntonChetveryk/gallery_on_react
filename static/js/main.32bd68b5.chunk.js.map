{"version":3,"sources":["components/Layout.jsx","components/pages/Photo.jsx","components/pages/Photos.jsx","components/pages/Albums.jsx","components/pages/Users.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["Layout","className","this","props","children","React","Component","Wrapper","styled","div","Photos","state","popoverOpen","toggle","setState","photo","title","src","thumbnailUrl","alt","id","Popover","isOpen","target","placement","PopoverBody","url","onClick","PhotosContainer","photos","isLoading","albumId","match","params","fetch","then","res","json","filter","item","userId","to","map","key","AlbumsContainer","Albums","albums","album","UsersContainer","Users","users","user","name","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.32bd68b5.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Layout extends React.Component {\r\n  render() {\r\n    return (\r\n      <div className=\"Layout\">\r\n        <main>{this.props.children}</main>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Layout;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Popover, PopoverBody } from \"reactstrap\";\r\n\r\nconst Wrapper = styled.div`\r\n  border: 1px solid black;\r\n  margin: 20px;\r\n  padding: 10px;\r\n  width: 200px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-between;\r\n  h3 {\r\n    font-size: 12px;\r\n  }\r\n`;\r\n\r\nexport default class Photos extends React.Component {\r\n  state = {\r\n    popoverOpen: false,\r\n  };\r\n\r\n  toggle = () => {\r\n    this.setState((state) => {\r\n      return { popoverOpen: !state.popoverOpen };\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { photo } = this.props;\r\n    const { popoverOpen } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <Wrapper>\r\n          <h3>{photo.title}</h3>\r\n          <img src={photo.thumbnailUrl} alt=\"img\" id={\"Popover-\" + photo.id} />\r\n\r\n          <Popover\r\n            isOpen={popoverOpen}\r\n            target={\"Popover-\" + photo.id}\r\n            toggle={this.toggle}\r\n            placement=\"bottom\"\r\n          >\r\n            <PopoverBody>\r\n              <img src={photo.url} alt=\"img\" onClick={this.toggle} />\r\n            </PopoverBody>\r\n          </Popover>\r\n        </Wrapper>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Photo from \"./Photo\";\r\n\r\nconst PhotosContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\nexport default class Photos extends React.Component {\r\n  state = {\r\n    photos: [],\r\n    isLoading: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { albumId } = this.props.match.params;\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    fetch(\"https://jsonplaceholder.typicode.com/photos\")\r\n      .then((res) => res.json())\r\n      .then((res) => res.filter((item) => item.albumId === +albumId))\r\n      .then((res) => this.setState({ photos: res, isLoading: false }));\r\n  }\r\n\r\n  render() {\r\n    const { photos, isLoading } = this.state;\r\n    const { userId } = this.props.match.params;\r\n\r\n    return (\r\n      <div>\r\n        <h1>Photos</h1>\r\n        <Link to={`/albums/${userId}`}>Назад</Link>\r\n        {isLoading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          <PhotosContainer>\r\n            {photos.map((photo) => (\r\n              <Photo key={photo.id} photo={photo} />\r\n            ))}\r\n          </PhotosContainer>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  border: 1px solid black;\r\n  margin: 20px;\r\n  padding: 10px;\r\n  width: 200px;\r\n  font-size: 12px;\r\n`;\r\n\r\nconst AlbumsContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport default class Albums extends React.Component {\r\n  state = {\r\n    albums: [],\r\n    isLoading: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    const { userId } = this.props.match.params;\r\n\r\n    this.setState({ isLoading: true });\r\n\r\n    fetch(\"https://jsonplaceholder.typicode.com/albums\")\r\n      .then((res) => res.json())\r\n      .then((res) => res.filter((item) => item.userId === +userId))\r\n      .then((res) => this.setState({ albums: res, isLoading: false }));\r\n  }\r\n  render() {\r\n    const { albums, isLoading } = this.state;\r\n    const { userId } = this.props.match.params;\r\n\r\n    return (\r\n      <div>\r\n        <h1>Albums</h1>\r\n        <Link to={`/`}>Назад</Link>\r\n        {isLoading ? (\r\n          <p>Loading...</p>\r\n        ) : (\r\n          <AlbumsContainer>\r\n            {albums.map((album) => (\r\n              <Wrapper key={album.id}>\r\n                <Link to={`/albums/${userId}/photos/${album.id}`}>\r\n                  {album.title}\r\n                </Link>\r\n              </Wrapper>\r\n            ))}\r\n          </AlbumsContainer>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Wrapper = styled.div`\r\n  border: 1px solid black;\r\n  margin: 20px;\r\n  padding: 10px;\r\n  width: 200px;\r\n  font-size: 12px;\r\n`;\r\n\r\nconst UsersContainer = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nexport default class Users extends React.Component {\r\n  state = {\r\n    users: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n      .then((res) => res.json())\r\n      .then((res) => this.setState({ users: res }));\r\n  }\r\n\r\n  render() {\r\n    const { users } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <h1>Users</h1>\r\n        <UsersContainer>\r\n          {users.map((user) => (\r\n            <Wrapper key={user.id}>\r\n              <Link to={`/albums/${user.id}`}>{user.name}</Link>\r\n            </Wrapper>\r\n          ))}\r\n        </UsersContainer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport Layout from \"./Layout\";\nimport Photos from \"./pages/Photos\";\nimport Albums from \"./pages/Albums\";\nimport Users from \"./pages/Users\";\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Router>\n        <Switch>\n          <Layout>\n            <Route exact path=\"/\" component={Users} />\n            <Route exact path=\"/albums/:userId\" component={Albums} />\n            <Route\n              exact\n              path=\"/albums/:userId/photos/:albumId\"\n              component={Photos}\n            />\n          </Layout>\n        </Switch>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/style.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}